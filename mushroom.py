# -*- coding: utf-8 -*-
"""mushrooms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vn6eool8sAn16fA-mXMlDlFnP7vVftOa
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier

data = pd.read_csv('/content/mushrooms.csv')

data.info()

data.isna().sum()

data.shape

data.columns

sns.countplot(x='class', data=data)

sns.countplot(x='class', data=data, hue='cap-shape')

sns.countplot(x='class', data=data, hue='cap-surface')

sns.heatmap(data.isna())

sns.displot(x='cap-shape', data=data)

data.columns

data['stalk-root'].unique()

cs = {'x':0, 'b':1, 's':2, 'f':3, 'k':4, 'c':5}
c = {'p':0, 'e':1}
csu = {'s':0, 'y':1, 'f':2, 'g':3}
cco = {'n':0, 'y':1, 'w':2, 'g':3, 'e':4, 'p':5, 'b':6, 'u':7, 'c':8, 'r':9}
br = {'t':0, 'f':1}
od = {'p':0, 'a':1, 'l':2, 'n':3, 'f':4, 'c':5, 'y':6, 's':7, 'm':8}
ga = {'f':0, 'a':1}
gs = {'c':0, 'w':1}
gc = {'k':0, 'n':1, 'g':2, 'p':3, 'w':4, 'h':5, 'u':6, 'e':7, 'b':8, 'r':9, 'y':10, 'o':11}
st = {'e':0, 't':1}
ssar = {'s':0, 'f':1, 'k':2, 'y':3}
scar = {'w':0, 'g':1, 'p':2, 'n':3, 'b':4, 'e':5, 'o':6, 'c':7, 'y':8}
vt = {'p':1}
vc = {'w':0, 'n':1, 'o':2, 'y':3}
rn = {'o':0, 't':1, 'n':2}
rt = {'p':0, 'e':1, 'l':2, 'f':3, 'n':4}
spc = {'k':0, 'n':1, 'u':2, 'h':3, 'w':4, 'r':5, 'o':6, 'y':7, 'b':5}
p = {'s':0, 'n':1, 'a':2, 'v':3, 'y':4, 'c':5}
h = {'u':0, 'g':1, 'm':2, 'd':3, 'p':4, 'w':5, 'l':6}
data['cap-shape'] = [cs[item] for item in data['cap-shape']]
data['class'] = [c[item] for item in data['class']]
data['cap-surface'] = [csu[item] for item in data['cap-surface']]
data['cap-color'] = [cco[item] for item in data['cap-color']]
data['bruises'] = [br[item] for item in data['bruises']]
data['odor'] = [od[item] for item in data['odor']]
data['gill-attachment'] = [ga[item] for item in data['gill-attachment']]
data['gill-spacing'] = [gs[item] for item in data['gill-spacing']]
data['gill-color'] = [gc[item] for item in data['gill-color']]
data['stalk-shape'] = [st[item] for item in data['stalk-shape']]
# data['stalk-root'] = [sr[item] for item in data['stalk-root']]
data['stalk-surface-above-ring'] = [ssar[item] for item in data['stalk-surface-above-ring']]
data['stalk-surface-below-ring'] = [ssar[item] for item in data['stalk-surface-below-ring']]
data['stalk-color-above-ring'] = [scar[item] for item in data['stalk-color-above-ring']]
data['stalk-color-below-ring'] = [scar[item] for item in data['stalk-color-below-ring']]
data['veil-type'] = [vt[item] for item in data['veil-type']]
data['veil-color'] = [vc[item] for item in data['veil-color']]
data['ring-number'] = [rn[item] for item in data['ring-number']]
data['ring-type'] = [rt[item] for item in data['ring-type']]
data['spore-print-color'] = [spc[item] for item in data['spore-print-color']]
data['population'] = [p[item] for item in data['population']]
data['habitat'] = [h[item] for item in data['habitat']]

data.head()

data.drop('gill-size', axis=1,inplace=True)

data.columns

X = data[['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',
       'gill-attachment', 'gill-spacing', 'gill-color',
       'stalk-shape', 'stalk-surface-above-ring', 'stalk-surface-below-ring',
       'stalk-color-above-ring', 'stalk-color-below-ring', 'veil-type',
       'veil-color', 'ring-number', 'ring-type', 'spore-print-color',
       'population', 'habitat']]
y = data['class']

y

X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

y_train

lr = LogisticRegression()
kc = KNeighborsClassifier()

lr.fit(X_test, y_test)
kc.fit(X_test, y_test)

lr_prediction = lr.predict(X_test)
kc_prediction = kc.predict(X_test)

#confusion matrix
from sklearn.metrics import confusion_matrix

pd.DataFrame(confusion_matrix(y_test, lr_prediction), columns=['Predicted No', 'Predicted Yes'], index=['Actual No', 'Actual Yes'])

pd.DataFrame(confusion_matrix(y_test, kc_prediction), columns=['Predicted No', 'Predicted Yes'], index=['Actual No', 'Actual Yes'])

from sklearn.metrics import classification_report

print(classification_report(y_test, lr_prediction))

print(classification_report(y_test, kc_prediction))

